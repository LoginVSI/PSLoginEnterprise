#
# Login Enterprise
# v7.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v7-preview), [Documentation (ReDoc)](/publicApi/v7-preview/docs/index.html)  v6.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6), [Documentation (ReDoc)](/publicApi/v6/docs/index.html)  v5.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v5), [Documentation (ReDoc)](/publicApi/v5/docs/index.html)  v4.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v4), [Documentation (ReDoc)](/publicApi/v4/docs/index.html)    <br><b>API v7 (preview) – Introduced in Login Enterprise v5.0 and subject to breaking changes when API v7 becomes generally available.</b></br> <br><b>API v6 – is the recommended version to use. It is the actively developed version starting with Login Enterprise v4.10.</b></br> <br><b>API v5 – is currently supported but unmaintained as of v4.10.</b></br> <br><b>API v4 – is deprecated starting with v4.10. Will be removed in Q3 2023.</b></br>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 7.0-preview
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Environment

.PARAMETER Id
Environment Id
.PARAMETER Name
Environment Name
.PARAMETER Description
Description
.PARAMETER EnableEnvironmentDataCollection
Enable environment data collection
.PARAMETER EnvironmentCost
No description available.
.PARAMETER EnvironmentAttributes
No description available.
.PARAMETER Provider
No description available.
.PARAMETER Tests
Tests associated to this environment
.OUTPUTS

Environment<PSCustomObject>
#>

function Initialize-LEEnvironment {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EnableEnvironmentDataCollection},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EnvironmentCost},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EnvironmentAttributes},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Provider},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tests}
    )

    Process {
        'Creating PSCustomObject: PSLoginEnterprise => LEEnvironment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "enableEnvironmentDataCollection" = ${EnableEnvironmentDataCollection}
            "environmentCost" = ${EnvironmentCost}
            "environmentAttributes" = ${EnvironmentAttributes}
            "provider" = ${Provider}
            "tests" = ${Tests}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Environment<PSCustomObject>

.DESCRIPTION

Convert from JSON to Environment<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Environment<PSCustomObject>
#>
function ConvertFrom-LEJsonToEnvironment {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSLoginEnterprise => LEEnvironment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LEEnvironment
        $AllProperties = ("id", "name", "description", "enableEnvironmentDataCollection", "environmentCost", "environmentAttributes", "provider", "tests")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enableEnvironmentDataCollection"))) { #optional property not found
            $EnableEnvironmentDataCollection = $null
        } else {
            $EnableEnvironmentDataCollection = $JsonParameters.PSobject.Properties["enableEnvironmentDataCollection"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "environmentCost"))) { #optional property not found
            $EnvironmentCost = $null
        } else {
            $EnvironmentCost = $JsonParameters.PSobject.Properties["environmentCost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "environmentAttributes"))) { #optional property not found
            $EnvironmentAttributes = $null
        } else {
            $EnvironmentAttributes = $JsonParameters.PSobject.Properties["environmentAttributes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provider"))) { #optional property not found
            $Provider = $null
        } else {
            $Provider = $JsonParameters.PSobject.Properties["provider"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tests"))) { #optional property not found
            $Tests = $null
        } else {
            $Tests = $JsonParameters.PSobject.Properties["tests"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "description" = ${Description}
            "enableEnvironmentDataCollection" = ${EnableEnvironmentDataCollection}
            "environmentCost" = ${EnvironmentCost}
            "environmentAttributes" = ${EnvironmentAttributes}
            "provider" = ${Provider}
            "tests" = ${Tests}
        }

        return $PSO
    }

}

