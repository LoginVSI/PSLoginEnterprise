#
# Login Enterprise
# v7.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v7-preview), [Documentation (ReDoc)](/publicApi/v7-preview/docs/index.html)  v6.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6), [Documentation (ReDoc)](/publicApi/v6/docs/index.html)  v5.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v5), [Documentation (ReDoc)](/publicApi/v5/docs/index.html)  v4.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v4), [Documentation (ReDoc)](/publicApi/v4/docs/index.html)    <br><b>API v7 (preview) – Introduced in Login Enterprise v5.0 and subject to breaking changes when API v7 becomes generally available.</b></br> <br><b>API v6 – is the recommended version to use. It is the actively developed version starting with Login Enterprise v4.10.</b></br> <br><b>API v5 – is currently supported but unmaintained as of v4.10.</b></br> <br><b>API v4 – is deprecated starting with v4.10. Will be removed in Q3 2023.</b></br>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 7.0-preview
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Environment Cost

.PARAMETER Currency
No description available.
.PARAMETER ExpectedUserAmount
Expected User Amount
.PARAMETER ActualUserAmount
Actual User Amount
.PARAMETER CapitalExpenditures
Capital Expenditures
.PARAMETER OperationalExpenditures
Operational Expenditures
.OUTPUTS

EnvironmentCost<PSCustomObject>
#>

function Initialize-LEEnvironmentCost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("usd", "eur", "gbp")]
        [PSCustomObject]
        ${Currency},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ExpectedUserAmount},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ActualUserAmount},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CapitalExpenditures},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${OperationalExpenditures}
    )

    Process {
        'Creating PSCustomObject: PSLoginEnterprise => LEEnvironmentCost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "currency" = ${Currency}
            "expectedUserAmount" = ${ExpectedUserAmount}
            "actualUserAmount" = ${ActualUserAmount}
            "capitalExpenditures" = ${CapitalExpenditures}
            "operationalExpenditures" = ${OperationalExpenditures}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EnvironmentCost<PSCustomObject>

.DESCRIPTION

Convert from JSON to EnvironmentCost<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EnvironmentCost<PSCustomObject>
#>
function ConvertFrom-LEJsonToEnvironmentCost {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSLoginEnterprise => LEEnvironmentCost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LEEnvironmentCost
        $AllProperties = ("currency", "expectedUserAmount", "actualUserAmount", "capitalExpenditures", "operationalExpenditures")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currency"))) { #optional property not found
            $Currency = $null
        } else {
            $Currency = $JsonParameters.PSobject.Properties["currency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expectedUserAmount"))) { #optional property not found
            $ExpectedUserAmount = $null
        } else {
            $ExpectedUserAmount = $JsonParameters.PSobject.Properties["expectedUserAmount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actualUserAmount"))) { #optional property not found
            $ActualUserAmount = $null
        } else {
            $ActualUserAmount = $JsonParameters.PSobject.Properties["actualUserAmount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "capitalExpenditures"))) { #optional property not found
            $CapitalExpenditures = $null
        } else {
            $CapitalExpenditures = $JsonParameters.PSobject.Properties["capitalExpenditures"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operationalExpenditures"))) { #optional property not found
            $OperationalExpenditures = $null
        } else {
            $OperationalExpenditures = $JsonParameters.PSobject.Properties["operationalExpenditures"].value
        }

        $PSO = [PSCustomObject]@{
            "currency" = ${Currency}
            "expectedUserAmount" = ${ExpectedUserAmount}
            "actualUserAmount" = ${ActualUserAmount}
            "capitalExpenditures" = ${CapitalExpenditures}
            "operationalExpenditures" = ${OperationalExpenditures}
        }

        return $PSO
    }

}

