#
# Login Enterprise
# v7.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v7-preview), [Documentation (ReDoc)](/publicApi/v7-preview/docs/index.html)  v6.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6), [Documentation (ReDoc)](/publicApi/v6/docs/index.html)  v5.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v5), [Documentation (ReDoc)](/publicApi/v5/docs/index.html)  v4.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v4), [Documentation (ReDoc)](/publicApi/v4/docs/index.html)    <br><b>API v7 (preview) – Introduced in Login Enterprise v5.0 and subject to breaking changes when API v7 becomes generally available.</b></br> <br><b>API v6 – is the recommended version to use. It is the actively developed version starting with Login Enterprise v4.10.</b></br> <br><b>API v5 – is currently supported but unmaintained as of v4.10.</b></br> <br><b>API v4 – is deprecated starting with v4.10. Will be removed in Q3 2023.</b></br>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 7.0-preview
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Eux score

.PARAMETER Score
Final Eux score
.PARAMETER SteadyStateScore
Eux score under normal, unstressed conditions. Calculated excluding the logon phase
.PARAMETER Baseline
Represents the best scoring eux interval of a test run, given a configured time window
.PARAMETER BaselineStartMinute
Starting time of the baseline score's interval
.PARAMETER BaselineWindowSize
Baseline window size in minutes
.PARAMETER Version
Eux score version
.PARAMETER State
No description available.
.OUTPUTS

EuxScore<PSCustomObject>
#>

function Initialize-LEEuxScore {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Score},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${SteadyStateScore},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Baseline},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BaselineStartMinute},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BaselineWindowSize},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Version},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("disabled", "inProgress", "completed", "unavailable")]
        [PSCustomObject]
        ${State}
    )

    Process {
        'Creating PSCustomObject: PSLoginEnterprise => LEEuxScore' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "score" = ${Score}
            "steadyStateScore" = ${SteadyStateScore}
            "baseline" = ${Baseline}
            "baselineStartMinute" = ${BaselineStartMinute}
            "baselineWindowSize" = ${BaselineWindowSize}
            "version" = ${Version}
            "state" = ${State}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EuxScore<PSCustomObject>

.DESCRIPTION

Convert from JSON to EuxScore<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EuxScore<PSCustomObject>
#>
function ConvertFrom-LEJsonToEuxScore {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSLoginEnterprise => LEEuxScore' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LEEuxScore
        $AllProperties = ("score", "steadyStateScore", "baseline", "baselineStartMinute", "baselineWindowSize", "version", "state")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "score"))) { #optional property not found
            $Score = $null
        } else {
            $Score = $JsonParameters.PSobject.Properties["score"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "steadyStateScore"))) { #optional property not found
            $SteadyStateScore = $null
        } else {
            $SteadyStateScore = $JsonParameters.PSobject.Properties["steadyStateScore"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "baseline"))) { #optional property not found
            $Baseline = $null
        } else {
            $Baseline = $JsonParameters.PSobject.Properties["baseline"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "baselineStartMinute"))) { #optional property not found
            $BaselineStartMinute = $null
        } else {
            $BaselineStartMinute = $JsonParameters.PSobject.Properties["baselineStartMinute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "baselineWindowSize"))) { #optional property not found
            $BaselineWindowSize = $null
        } else {
            $BaselineWindowSize = $JsonParameters.PSobject.Properties["baselineWindowSize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        $PSO = [PSCustomObject]@{
            "score" = ${Score}
            "steadyStateScore" = ${SteadyStateScore}
            "baseline" = ${Baseline}
            "baselineStartMinute" = ${BaselineStartMinute}
            "baselineWindowSize" = ${BaselineWindowSize}
            "version" = ${Version}
            "state" = ${State}
        }

        return $PSO
    }

}

