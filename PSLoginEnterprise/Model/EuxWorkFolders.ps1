#
# Login Enterprise
# v7.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v7-preview), [Documentation (ReDoc)](/publicApi/v7-preview/docs/index.html)  v6.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6), [Documentation (ReDoc)](/publicApi/v6/docs/index.html)  v5.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v5), [Documentation (ReDoc)](/publicApi/v5/docs/index.html)  v4.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v4), [Documentation (ReDoc)](/publicApi/v4/docs/index.html)    <br><b>API v7 (preview) – Introduced in Login Enterprise v5.0 and subject to breaking changes when API v7 becomes generally available.</b></br> <br><b>API v6 – is the recommended version to use. It is the actively developed version starting with Login Enterprise v4.10.</b></br> <br><b>API v5 – is currently supported but unmaintained as of v4.10.</b></br> <br><b>API v4 – is deprecated starting with v4.10. Will be removed in Q3 2023.</b></br>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 7.0-preview
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Eux work folders

.PARAMETER EuxFolderPath
Eux folder path
.PARAMETER AppDataFolderPath
Application data folder path
.PARAMETER MyDocumentsFolderPath
My documents folder path
.OUTPUTS

EuxWorkFolders<PSCustomObject>
#>

function Initialize-LEEuxWorkFolders {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EuxFolderPath},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppDataFolderPath},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MyDocumentsFolderPath}
    )

    Process {
        'Creating PSCustomObject: PSLoginEnterprise => LEEuxWorkFolders' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "euxFolderPath" = ${EuxFolderPath}
            "appDataFolderPath" = ${AppDataFolderPath}
            "myDocumentsFolderPath" = ${MyDocumentsFolderPath}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EuxWorkFolders<PSCustomObject>

.DESCRIPTION

Convert from JSON to EuxWorkFolders<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EuxWorkFolders<PSCustomObject>
#>
function ConvertFrom-LEJsonToEuxWorkFolders {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSLoginEnterprise => LEEuxWorkFolders' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LEEuxWorkFolders
        $AllProperties = ("euxFolderPath", "appDataFolderPath", "myDocumentsFolderPath")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "euxFolderPath"))) { #optional property not found
            $EuxFolderPath = $null
        } else {
            $EuxFolderPath = $JsonParameters.PSobject.Properties["euxFolderPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appDataFolderPath"))) { #optional property not found
            $AppDataFolderPath = $null
        } else {
            $AppDataFolderPath = $JsonParameters.PSobject.Properties["appDataFolderPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "myDocumentsFolderPath"))) { #optional property not found
            $MyDocumentsFolderPath = $null
        } else {
            $MyDocumentsFolderPath = $JsonParameters.PSobject.Properties["myDocumentsFolderPath"].value
        }

        $PSO = [PSCustomObject]@{
            "euxFolderPath" = ${EuxFolderPath}
            "appDataFolderPath" = ${AppDataFolderPath}
            "myDocumentsFolderPath" = ${MyDocumentsFolderPath}
        }

        return $PSO
    }

}

