#
# Login Enterprise
# v8.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v8-preview), [Documentation (ReDoc)](/publicApi/v8-preview/docs/index.html)  v7.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v7), [Documentation (ReDoc)](/publicApi/v7/docs/index.html)  v6.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6), [Documentation (ReDoc)](/publicApi/v6/docs/index.html)    <br><b>API v8 (preview) – Introduced in Login Enterprise v6.0 and subject to breaking changes.</b></br> <br><b>API v7 – is the recommended version to use. It is the actively developed version starting with Login Enterprise v6.0.</b></br> <br><b>API v6 – is currently supported, but unmaintained as of v6.0.</b></br> <br><b>API v5 and v4 - These versions are removed in v6.0.</b></br>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 7.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Threshold notification

.PARAMETER Type
No description available.
.PARAMETER Id
Notification id
.PARAMETER TimesExceeded
Number of times the event occurred
.PARAMETER PeriodDuration
Time range for calculation
.PARAMETER CooldownDuration
Time to pass between notification emails
.PARAMETER IsEnabled
Enables notification
.PARAMETER EmailRecipients
Email recipients
.PARAMETER UseCustomMailRecipient
Use custom mail recipient
.PARAMETER Threshold
No description available.
.OUTPUTS

ThresholdNotification<PSCustomObject>
#>

function Initialize-LEThresholdNotification {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TimesExceeded},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PeriodDuration},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CooldownDuration},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsEnabled},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmailRecipients},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UseCustomMailRecipient},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Threshold}
    )

    Process {
        'Creating PSCustomObject: PSLoginEnterprise => LEThresholdNotification' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "id" = ${Id}
            "timesExceeded" = ${TimesExceeded}
            "periodDuration" = ${PeriodDuration}
            "cooldownDuration" = ${CooldownDuration}
            "isEnabled" = ${IsEnabled}
            "emailRecipients" = ${EmailRecipients}
            "useCustomMailRecipient" = ${UseCustomMailRecipient}
            "threshold" = ${Threshold}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ThresholdNotification<PSCustomObject>

.DESCRIPTION

Convert from JSON to ThresholdNotification<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ThresholdNotification<PSCustomObject>
#>
function ConvertFrom-LEJsonToThresholdNotification {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSLoginEnterprise => LEThresholdNotification' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LEThresholdNotification
        $AllProperties = ("type", "id", "timesExceeded", "periodDuration", "cooldownDuration", "isEnabled", "emailRecipients", "useCustomMailRecipient", "threshold")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timesExceeded"))) { #optional property not found
            $TimesExceeded = $null
        } else {
            $TimesExceeded = $JsonParameters.PSobject.Properties["timesExceeded"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "periodDuration"))) { #optional property not found
            $PeriodDuration = $null
        } else {
            $PeriodDuration = $JsonParameters.PSobject.Properties["periodDuration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cooldownDuration"))) { #optional property not found
            $CooldownDuration = $null
        } else {
            $CooldownDuration = $JsonParameters.PSobject.Properties["cooldownDuration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isEnabled"))) { #optional property not found
            $IsEnabled = $null
        } else {
            $IsEnabled = $JsonParameters.PSobject.Properties["isEnabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailRecipients"))) { #optional property not found
            $EmailRecipients = $null
        } else {
            $EmailRecipients = $JsonParameters.PSobject.Properties["emailRecipients"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "useCustomMailRecipient"))) { #optional property not found
            $UseCustomMailRecipient = $null
        } else {
            $UseCustomMailRecipient = $JsonParameters.PSobject.Properties["useCustomMailRecipient"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "threshold"))) { #optional property not found
            $Threshold = $null
        } else {
            $Threshold = $JsonParameters.PSobject.Properties["threshold"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "id" = ${Id}
            "timesExceeded" = ${TimesExceeded}
            "periodDuration" = ${PeriodDuration}
            "cooldownDuration" = ${CooldownDuration}
            "isEnabled" = ${IsEnabled}
            "emailRecipients" = ${EmailRecipients}
            "useCustomMailRecipient" = ${UseCustomMailRecipient}
            "threshold" = ${Threshold}
        }

        return $PSO
    }

}

