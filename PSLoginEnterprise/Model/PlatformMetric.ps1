#
# Login Enterprise
# v8.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v8-preview), [Documentation (ReDoc)](/publicApi/v8-preview/docs/index.html)  v7.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v7), [Documentation (ReDoc)](/publicApi/v7/docs/index.html)  v6.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6), [Documentation (ReDoc)](/publicApi/v6/docs/index.html)    <br><b>API v8 (preview) – Introduced in Login Enterprise v6.0 and subject to breaking changes.</b></br> <br><b>API v7 – is the recommended version to use. It is the actively developed version starting with Login Enterprise v6.0.</b></br> <br><b>API v6 – is currently supported, but unmaintained as of v6.0.</b></br> <br><b>API v5 and v4 - These versions are removed in v6.0.</b></br>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 7.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents a metric collected from the environment.

.PARAMETER MetricId
Unique identifier for the metric.
.PARAMETER EnvironmentKey
The unique identifier of the LoginEnterprise environment associated with the metric.
.PARAMETER Timestamp
The date and time when the metric was recorded.
.PARAMETER DisplayName
Human-readable name for the metric.
.PARAMETER Unit
Unit of measurement for the metric value.
.PARAMETER Instance
Specific instance or source from which the metric is collected.
.PARAMETER Value
The numeric value of the metric.
.PARAMETER Group
Group or category to which the metric belongs.
.PARAMETER ComponentType
Type of component associated with the metric.
.PARAMETER CustomTags
Additional custom tags associated with the metric.
.OUTPUTS

PlatformMetric<PSCustomObject>
#>

function Initialize-LEPlatformMetric {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MetricId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnvironmentKey},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Unit},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Instance},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Value},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Group},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ComponentType},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomTags}
    )

    Process {
        'Creating PSCustomObject: PSLoginEnterprise => LEPlatformMetric' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "metricId" = ${MetricId}
            "environmentKey" = ${EnvironmentKey}
            "timestamp" = ${Timestamp}
            "displayName" = ${DisplayName}
            "unit" = ${Unit}
            "instance" = ${Instance}
            "value" = ${Value}
            "group" = ${Group}
            "componentType" = ${ComponentType}
            "customTags" = ${CustomTags}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PlatformMetric<PSCustomObject>

.DESCRIPTION

Convert from JSON to PlatformMetric<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PlatformMetric<PSCustomObject>
#>
function ConvertFrom-LEJsonToPlatformMetric {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSLoginEnterprise => LEPlatformMetric' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LEPlatformMetric
        $AllProperties = ("metricId", "environmentKey", "timestamp", "displayName", "unit", "instance", "value", "group", "componentType", "customTags")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metricId"))) { #optional property not found
            $MetricId = $null
        } else {
            $MetricId = $JsonParameters.PSobject.Properties["metricId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "environmentKey"))) { #optional property not found
            $EnvironmentKey = $null
        } else {
            $EnvironmentKey = $JsonParameters.PSobject.Properties["environmentKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unit"))) { #optional property not found
            $Unit = $null
        } else {
            $Unit = $JsonParameters.PSobject.Properties["unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instance"))) { #optional property not found
            $Instance = $null
        } else {
            $Instance = $JsonParameters.PSobject.Properties["instance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group"))) { #optional property not found
            $Group = $null
        } else {
            $Group = $JsonParameters.PSobject.Properties["group"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "componentType"))) { #optional property not found
            $ComponentType = $null
        } else {
            $ComponentType = $JsonParameters.PSobject.Properties["componentType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customTags"))) { #optional property not found
            $CustomTags = $null
        } else {
            $CustomTags = $JsonParameters.PSobject.Properties["customTags"].value
        }

        $PSO = [PSCustomObject]@{
            "metricId" = ${MetricId}
            "environmentKey" = ${EnvironmentKey}
            "timestamp" = ${Timestamp}
            "displayName" = ${DisplayName}
            "unit" = ${Unit}
            "instance" = ${Instance}
            "value" = ${Value}
            "group" = ${Group}
            "componentType" = ${ComponentType}
            "customTags" = ${CustomTags}
        }

        return $PSO
    }

}

