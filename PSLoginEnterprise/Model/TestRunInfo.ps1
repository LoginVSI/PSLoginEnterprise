#
# Login Enterprise
# v8.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v8-preview), [Documentation (ReDoc)](/publicApi/v8-preview/docs/index.html)  v7.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v7), [Documentation (ReDoc)](/publicApi/v7/docs/index.html)  v6.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6), [Documentation (ReDoc)](/publicApi/v6/docs/index.html)    <br><b>API v8 (preview) – Introduced in Login Enterprise v6.0 and subject to breaking changes.</b></br> <br><b>API v7 – is the recommended version to use. It is the actively developed version starting with Login Enterprise v6.0.</b></br> <br><b>API v6 – is currently supported, but unmaintained as of v6.0.</b></br> <br><b>API v5 and v4 - These versions are removed in v6.0.</b></br>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 7.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TestRunId
Test run id
.PARAMETER TestName
Test name
.PARAMETER TestCounter
Test counter
.PARAMETER RampUpCompletedMinute
RampUp completed minute
.PARAMETER VsiMaxReachedAt
Vsi max reached at
.PARAMETER ActualVsiMax
Actual vsi max
.OUTPUTS

TestRunInfo<PSCustomObject>
#>

function Initialize-LETestRunInfo {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TestRunId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TestName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TestCounter},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RampUpCompletedMinute},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VsiMaxReachedAt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ActualVsiMax}
    )

    Process {
        'Creating PSCustomObject: PSLoginEnterprise => LETestRunInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "testRunId" = ${TestRunId}
            "testName" = ${TestName}
            "testCounter" = ${TestCounter}
            "rampUpCompletedMinute" = ${RampUpCompletedMinute}
            "vsiMaxReachedAt" = ${VsiMaxReachedAt}
            "actualVsiMax" = ${ActualVsiMax}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TestRunInfo<PSCustomObject>

.DESCRIPTION

Convert from JSON to TestRunInfo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TestRunInfo<PSCustomObject>
#>
function ConvertFrom-LEJsonToTestRunInfo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSLoginEnterprise => LETestRunInfo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LETestRunInfo
        $AllProperties = ("testRunId", "testName", "testCounter", "rampUpCompletedMinute", "vsiMaxReachedAt", "actualVsiMax")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "testRunId"))) { #optional property not found
            $TestRunId = $null
        } else {
            $TestRunId = $JsonParameters.PSobject.Properties["testRunId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "testName"))) { #optional property not found
            $TestName = $null
        } else {
            $TestName = $JsonParameters.PSobject.Properties["testName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "testCounter"))) { #optional property not found
            $TestCounter = $null
        } else {
            $TestCounter = $JsonParameters.PSobject.Properties["testCounter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rampUpCompletedMinute"))) { #optional property not found
            $RampUpCompletedMinute = $null
        } else {
            $RampUpCompletedMinute = $JsonParameters.PSobject.Properties["rampUpCompletedMinute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vsiMaxReachedAt"))) { #optional property not found
            $VsiMaxReachedAt = $null
        } else {
            $VsiMaxReachedAt = $JsonParameters.PSobject.Properties["vsiMaxReachedAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actualVsiMax"))) { #optional property not found
            $ActualVsiMax = $null
        } else {
            $ActualVsiMax = $JsonParameters.PSobject.Properties["actualVsiMax"].value
        }

        $PSO = [PSCustomObject]@{
            "testRunId" = ${TestRunId}
            "testName" = ${TestName}
            "testCounter" = ${TestCounter}
            "rampUpCompletedMinute" = ${RampUpCompletedMinute}
            "vsiMaxReachedAt" = ${VsiMaxReachedAt}
            "actualVsiMax" = ${ActualVsiMax}
        }

        return $PSO
    }

}

