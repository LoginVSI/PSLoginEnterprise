#
# Login Enterprise
# v8.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v8-preview), [Documentation (ReDoc)](/publicApi/v8-preview/docs/index.html)  v7.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v7), [Documentation (ReDoc)](/publicApi/v7/docs/index.html)  v6.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6), [Documentation (ReDoc)](/publicApi/v6/docs/index.html)    <br><b>API v8 (preview) – Introduced in Login Enterprise v6.0 and subject to breaking changes.</b></br> <br><b>API v7 – is the recommended version to use. It is the actively developed version starting with Login Enterprise v6.0.</b></br> <br><b>API v6 – is currently supported, but unmaintained as of v6.0.</b></br> <br><b>API v5 and v4 - These versions are removed in v6.0.</b></br>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 7.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

User session metrics calculation result per minute

.PARAMETER Timestamp
Time stamp
.PARAMETER MetricId
Metric id
.PARAMETER Measurement
Measurement
.PARAMETER Count
Count
.PARAMETER DisplayName
Display name
.PARAMETER Unit
Unit
.OUTPUTS

UserSessionMetricsAggregatedResult<PSCustomObject>
#>

function Initialize-LEUserSessionMetricsAggregatedResult {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MetricId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Measurement},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Count},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Unit}
    )

    Process {
        'Creating PSCustomObject: PSLoginEnterprise => LEUserSessionMetricsAggregatedResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "timestamp" = ${Timestamp}
            "metricId" = ${MetricId}
            "measurement" = ${Measurement}
            "count" = ${Count}
            "displayName" = ${DisplayName}
            "unit" = ${Unit}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UserSessionMetricsAggregatedResult<PSCustomObject>

.DESCRIPTION

Convert from JSON to UserSessionMetricsAggregatedResult<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UserSessionMetricsAggregatedResult<PSCustomObject>
#>
function ConvertFrom-LEJsonToUserSessionMetricsAggregatedResult {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSLoginEnterprise => LEUserSessionMetricsAggregatedResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LEUserSessionMetricsAggregatedResult
        $AllProperties = ("timestamp", "metricId", "measurement", "count", "displayName", "unit")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metricId"))) { #optional property not found
            $MetricId = $null
        } else {
            $MetricId = $JsonParameters.PSobject.Properties["metricId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "measurement"))) { #optional property not found
            $Measurement = $null
        } else {
            $Measurement = $JsonParameters.PSobject.Properties["measurement"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count"))) { #optional property not found
            $Count = $null
        } else {
            $Count = $JsonParameters.PSobject.Properties["count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unit"))) { #optional property not found
            $Unit = $null
        } else {
            $Unit = $JsonParameters.PSobject.Properties["unit"].value
        }

        $PSO = [PSCustomObject]@{
            "timestamp" = ${Timestamp}
            "metricId" = ${MetricId}
            "measurement" = ${Measurement}
            "count" = ${Count}
            "displayName" = ${DisplayName}
            "unit" = ${Unit}
        }

        return $PSO
    }

}

