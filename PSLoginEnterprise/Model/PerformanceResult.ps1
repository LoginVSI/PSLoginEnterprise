#
# Login Enterprise
# v8.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v8-preview), [Documentation (ReDoc)](/publicApi/v8-preview/docs/index.html)  v7.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v7), [Documentation (ReDoc)](/publicApi/v7/docs/index.html)  v6.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6), [Documentation (ReDoc)](/publicApi/v6/docs/index.html)    <br><b>API v8 (preview) – Introduced in Login Enterprise v6.0 and subject to breaking changes.</b></br> <br><b>API v7 – is the recommended version to use. It is the actively developed version starting with Login Enterprise v6.0.</b></br> <br><b>API v6 – is currently supported, but unmaintained as of v6.0.</b></br> <br><b>API v5 and v4 - These versions are removed in v6.0.</b></br>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 7.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Performance result

.PARAMETER Duration
Duration
.PARAMETER Threshold
Threshold
.PARAMETER DurationDifference
Duration difference
.PARAMETER ThresholdDifference
Threshold difference
.PARAMETER IsSuccessful
Is successful
.OUTPUTS

PerformanceResult<PSCustomObject>
#>

function Initialize-LEPerformanceResult {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Duration},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Threshold},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DurationDifference},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ThresholdDifference},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSuccessful}
    )

    Process {
        'Creating PSCustomObject: PSLoginEnterprise => LEPerformanceResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "duration" = ${Duration}
            "threshold" = ${Threshold}
            "durationDifference" = ${DurationDifference}
            "thresholdDifference" = ${ThresholdDifference}
            "isSuccessful" = ${IsSuccessful}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PerformanceResult<PSCustomObject>

.DESCRIPTION

Convert from JSON to PerformanceResult<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PerformanceResult<PSCustomObject>
#>
function ConvertFrom-LEJsonToPerformanceResult {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSLoginEnterprise => LEPerformanceResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LEPerformanceResult
        $AllProperties = ("duration", "threshold", "durationDifference", "thresholdDifference", "isSuccessful")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "duration"))) { #optional property not found
            $Duration = $null
        } else {
            $Duration = $JsonParameters.PSobject.Properties["duration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "threshold"))) { #optional property not found
            $Threshold = $null
        } else {
            $Threshold = $JsonParameters.PSobject.Properties["threshold"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "durationDifference"))) { #optional property not found
            $DurationDifference = $null
        } else {
            $DurationDifference = $JsonParameters.PSobject.Properties["durationDifference"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "thresholdDifference"))) { #optional property not found
            $ThresholdDifference = $null
        } else {
            $ThresholdDifference = $JsonParameters.PSobject.Properties["thresholdDifference"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isSuccessful"))) { #optional property not found
            $IsSuccessful = $null
        } else {
            $IsSuccessful = $JsonParameters.PSobject.Properties["isSuccessful"].value
        }

        $PSO = [PSCustomObject]@{
            "duration" = ${Duration}
            "threshold" = ${Threshold}
            "durationDifference" = ${DurationDifference}
            "thresholdDifference" = ${ThresholdDifference}
            "isSuccessful" = ${IsSuccessful}
        }

        return $PSO
    }

}

