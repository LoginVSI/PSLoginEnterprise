#
# Login Enterprise
# v8.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v8-preview), [Documentation (ReDoc)](/publicApi/v8-preview/docs/index.html)  v7.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v7), [Documentation (ReDoc)](/publicApi/v7/docs/index.html)  v6.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6), [Documentation (ReDoc)](/publicApi/v6/docs/index.html)    <br><b>API v8 (preview) – Introduced in Login Enterprise v6.0 and subject to breaking changes.</b></br> <br><b>API v7 – is the recommended version to use. It is the actively developed version starting with Login Enterprise v6.0.</b></br> <br><b>API v6 – is currently supported, but unmaintained as of v6.0.</b></br> <br><b>API v5 and v4 - These versions are removed in v6.0.</b></br>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 7.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Web application details

.PARAMETER Type
No description available.
.PARAMETER BrowserName
No description available.
.PARAMETER Url
Start URL
.PARAMETER ProfileLocation
Profile location
.OUTPUTS

WebApplicationDetails<PSCustomObject>
#>

function Initialize-LEWebApplicationDetails {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("chrome", "edge42", "edge44", "edgeChromium", "firefox")]
        [PSCustomObject]
        ${BrowserName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProfileLocation}
    )

    Process {
        'Creating PSCustomObject: PSLoginEnterprise => LEWebApplicationDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "browserName" = ${BrowserName}
            "url" = ${Url}
            "profileLocation" = ${ProfileLocation}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WebApplicationDetails<PSCustomObject>

.DESCRIPTION

Convert from JSON to WebApplicationDetails<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WebApplicationDetails<PSCustomObject>
#>
function ConvertFrom-LEJsonToWebApplicationDetails {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSLoginEnterprise => LEWebApplicationDetails' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LEWebApplicationDetails
        $AllProperties = ("type", "browserName", "url", "profileLocation")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "browserName"))) { #optional property not found
            $BrowserName = $null
        } else {
            $BrowserName = $JsonParameters.PSobject.Properties["browserName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "profileLocation"))) { #optional property not found
            $ProfileLocation = $null
        } else {
            $ProfileLocation = $JsonParameters.PSobject.Properties["profileLocation"].value
        }

        $PSO = [PSCustomObject]@{
            "type" = ${Type}
            "browserName" = ${BrowserName}
            "url" = ${Url}
            "profileLocation" = ${ProfileLocation}
        }

        return $PSO
    }

}

