#
# Login Enterprise
# v7.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v7-preview), [Documentation (ReDoc)](/publicApi/v7-preview/docs/index.html)  v6.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6), [Documentation (ReDoc)](/publicApi/v6/docs/index.html)  v5.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v5), [Documentation (ReDoc)](/publicApi/v5/docs/index.html)  v4.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v4), [Documentation (ReDoc)](/publicApi/v4/docs/index.html)    <br><b>API v7 (preview) – Introduced in Login Enterprise v5.0 and subject to breaking changes when API v7 becomes generally available.</b></br> <br><b>API v6 – is the recommended version to use. It is the actively developed version starting with Login Enterprise v4.10.</b></br> <br><b>API v5 – is currently supported but unmaintained as of v4.10.</b></br> <br><b>API v4 – is deprecated starting with v4.10. Will be removed in Q3 2023.</b></br>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 7.0-preview
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

User session metric result

.PARAMETER Timestamp
Timestamp
.PARAMETER TestRunId
Test run id
.PARAMETER UserSessionKey
User session key
.PARAMETER Measurement
Measurement
.PARAMETER DisplayName
Display name
.PARAMETER Unit
Unit
.PARAMETER Instance
Name of field to identify intended instance from query result
.PARAMETER Tag
Tag
.PARAMETER FieldName
Selected field name from query
.OUTPUTS

UserSessionMetricResult<PSCustomObject>
#>

function Initialize-LEUserSessionMetricResult {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TestRunId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserSessionKey},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Measurement},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Unit},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Instance},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Tag},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FieldName}
    )

    Process {
        'Creating PSCustomObject: PSLoginEnterprise => LEUserSessionMetricResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "timestamp" = ${Timestamp}
            "testRunId" = ${TestRunId}
            "userSessionKey" = ${UserSessionKey}
            "measurement" = ${Measurement}
            "displayName" = ${DisplayName}
            "unit" = ${Unit}
            "instance" = ${Instance}
            "tag" = ${Tag}
            "fieldName" = ${FieldName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UserSessionMetricResult<PSCustomObject>

.DESCRIPTION

Convert from JSON to UserSessionMetricResult<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UserSessionMetricResult<PSCustomObject>
#>
function ConvertFrom-LEJsonToUserSessionMetricResult {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSLoginEnterprise => LEUserSessionMetricResult' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LEUserSessionMetricResult
        $AllProperties = ("timestamp", "testRunId", "userSessionKey", "measurement", "displayName", "unit", "instance", "tag", "fieldName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "testRunId"))) { #optional property not found
            $TestRunId = $null
        } else {
            $TestRunId = $JsonParameters.PSobject.Properties["testRunId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userSessionKey"))) { #optional property not found
            $UserSessionKey = $null
        } else {
            $UserSessionKey = $JsonParameters.PSobject.Properties["userSessionKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "measurement"))) { #optional property not found
            $Measurement = $null
        } else {
            $Measurement = $JsonParameters.PSobject.Properties["measurement"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unit"))) { #optional property not found
            $Unit = $null
        } else {
            $Unit = $JsonParameters.PSobject.Properties["unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instance"))) { #optional property not found
            $Instance = $null
        } else {
            $Instance = $JsonParameters.PSobject.Properties["instance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tag"))) { #optional property not found
            $Tag = $null
        } else {
            $Tag = $JsonParameters.PSobject.Properties["tag"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fieldName"))) { #optional property not found
            $FieldName = $null
        } else {
            $FieldName = $JsonParameters.PSobject.Properties["fieldName"].value
        }

        $PSO = [PSCustomObject]@{
            "timestamp" = ${Timestamp}
            "testRunId" = ${TestRunId}
            "userSessionKey" = ${UserSessionKey}
            "measurement" = ${Measurement}
            "displayName" = ${DisplayName}
            "unit" = ${Unit}
            "instance" = ${Instance}
            "tag" = ${Tag}
            "fieldName" = ${FieldName}
        }

        return $PSO
    }

}

