#
# Login Enterprise
# v7.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v7-preview), [Documentation (ReDoc)](/publicApi/v7-preview/docs/index.html)  v6.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6), [Documentation (ReDoc)](/publicApi/v6/docs/index.html)  v5.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v5), [Documentation (ReDoc)](/publicApi/v5/docs/index.html)  v4.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v4), [Documentation (ReDoc)](/publicApi/v4/docs/index.html)    <br><b>API v7 (preview) – Introduced in Login Enterprise v5.0 and subject to breaking changes when API v7 becomes generally available.</b></br> <br><b>API v6 – is the recommended version to use. It is the actively developed version starting with Login Enterprise v4.10.</b></br> <br><b>API v5 – is currently supported but unmaintained as of v4.10.</b></br> <br><b>API v4 – is deprecated starting with v4.10. Will be removed in Q3 2023.</b></br>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 6.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Measurement

.PARAMETER MeasurementId
Measurement id
.PARAMETER AppExecutionId
App execution id
.PARAMETER ApplicationId
Application id
.PARAMETER LauncherName
Launcher name
.PARAMETER AccountId
Account id
.PARAMETER TestRunId
Test run id
.PARAMETER UserSessionId
User session id
.PARAMETER Duration
Duration
.PARAMETER Timestamp
Measurement time-stamp
.PARAMETER Properties
Measurement properties
.OUTPUTS

Measurement<PSCustomObject>
#>

function Initialize-LEMeasurement {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MeasurementId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppExecutionId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApplicationId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LauncherName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccountId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TestRunId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserSessionId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Duration},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Properties}
    )

    Process {
        'Creating PSCustomObject: PSLoginEnterprise => LEMeasurement' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "measurementId" = ${MeasurementId}
            "appExecutionId" = ${AppExecutionId}
            "applicationId" = ${ApplicationId}
            "launcherName" = ${LauncherName}
            "accountId" = ${AccountId}
            "testRunId" = ${TestRunId}
            "userSessionId" = ${UserSessionId}
            "duration" = ${Duration}
            "timestamp" = ${Timestamp}
            "properties" = ${Properties}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Measurement<PSCustomObject>

.DESCRIPTION

Convert from JSON to Measurement<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Measurement<PSCustomObject>
#>
function ConvertFrom-LEJsonToMeasurement {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSLoginEnterprise => LEMeasurement' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LEMeasurement
        $AllProperties = ("measurementId", "appExecutionId", "applicationId", "launcherName", "accountId", "testRunId", "userSessionId", "duration", "timestamp", "properties")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "measurementId"))) { #optional property not found
            $MeasurementId = $null
        } else {
            $MeasurementId = $JsonParameters.PSobject.Properties["measurementId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appExecutionId"))) { #optional property not found
            $AppExecutionId = $null
        } else {
            $AppExecutionId = $JsonParameters.PSobject.Properties["appExecutionId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "applicationId"))) { #optional property not found
            $ApplicationId = $null
        } else {
            $ApplicationId = $JsonParameters.PSobject.Properties["applicationId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "launcherName"))) { #optional property not found
            $LauncherName = $null
        } else {
            $LauncherName = $JsonParameters.PSobject.Properties["launcherName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountId"))) { #optional property not found
            $AccountId = $null
        } else {
            $AccountId = $JsonParameters.PSobject.Properties["accountId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "testRunId"))) { #optional property not found
            $TestRunId = $null
        } else {
            $TestRunId = $JsonParameters.PSobject.Properties["testRunId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userSessionId"))) { #optional property not found
            $UserSessionId = $null
        } else {
            $UserSessionId = $JsonParameters.PSobject.Properties["userSessionId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "duration"))) { #optional property not found
            $Duration = $null
        } else {
            $Duration = $JsonParameters.PSobject.Properties["duration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "properties"))) { #optional property not found
            $Properties = $null
        } else {
            $Properties = $JsonParameters.PSobject.Properties["properties"].value
        }

        $PSO = [PSCustomObject]@{
            "measurementId" = ${MeasurementId}
            "appExecutionId" = ${AppExecutionId}
            "applicationId" = ${ApplicationId}
            "launcherName" = ${LauncherName}
            "accountId" = ${AccountId}
            "testRunId" = ${TestRunId}
            "userSessionId" = ${UserSessionId}
            "duration" = ${Duration}
            "timestamp" = ${Timestamp}
            "properties" = ${Properties}
        }

        return $PSO
    }

}

