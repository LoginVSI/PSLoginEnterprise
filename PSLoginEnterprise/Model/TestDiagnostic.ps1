#
# Login Enterprise
# v7.0-preview [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v7-preview), [Documentation (ReDoc)](/publicApi/v7-preview/docs/index.html)  v6.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v6), [Documentation (ReDoc)](/publicApi/v6/docs/index.html)  v5.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v5), [Documentation (ReDoc)](/publicApi/v5/docs/index.html)  v4.0 [API Console (Swagger)](/publicApi/swagger/index.html?urls.primaryName=Login%20Enterprise%20API%20v4), [Documentation (ReDoc)](/publicApi/v4/docs/index.html)    <br><b>API v7 (preview) – Introduced in Login Enterprise v5.0 and subject to breaking changes when API v7 becomes generally available.</b></br> <br><b>API v6 – is the recommended version to use. It is the actively developed version starting with Login Enterprise v4.10.</b></br> <br><b>API v5 – is currently supported but unmaintained as of v4.10.</b></br> <br><b>API v4 – is deprecated starting with v4.10. Will be removed in Q3 2023.</b></br>   The Login Enterprise Public API provides documentation and Swagger per version within the product. For additional information please refer to the [documentation](https://support.loginvsi.com/hc/en-us/articles/360009534760) on our website. 
# Version: 6.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Test diagnostic

.PARAMETER TestId
Test id
.PARAMETER TestName
Test name
.PARAMETER ActiveSessionCount
Amount of currently running sessions
.PARAMETER ActiveAccountCount
Amount of currently used accounts
.PARAMETER ActiveLauncherCount
Amount of currently used launchers
.PARAMETER LoginFailures
No description available.
.PARAMETER AppFailures
No description available.
.PARAMETER AppPerformance
No description available.
.PARAMETER Latency
No description available.
.PARAMETER LoginPerformance
No description available.
.OUTPUTS

TestDiagnostic<PSCustomObject>
#>

function Initialize-LETestDiagnostic {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TestId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TestName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ActiveSessionCount},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ActiveAccountCount},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ActiveLauncherCount},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LoginFailures},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AppFailures},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AppPerformance},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Latency},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LoginPerformance}
    )

    Process {
        'Creating PSCustomObject: PSLoginEnterprise => LETestDiagnostic' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "testId" = ${TestId}
            "testName" = ${TestName}
            "activeSessionCount" = ${ActiveSessionCount}
            "activeAccountCount" = ${ActiveAccountCount}
            "activeLauncherCount" = ${ActiveLauncherCount}
            "loginFailures" = ${LoginFailures}
            "appFailures" = ${AppFailures}
            "appPerformance" = ${AppPerformance}
            "latency" = ${Latency}
            "loginPerformance" = ${LoginPerformance}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TestDiagnostic<PSCustomObject>

.DESCRIPTION

Convert from JSON to TestDiagnostic<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TestDiagnostic<PSCustomObject>
#>
function ConvertFrom-LEJsonToTestDiagnostic {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSLoginEnterprise => LETestDiagnostic' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LETestDiagnostic
        $AllProperties = ("testId", "testName", "activeSessionCount", "activeAccountCount", "activeLauncherCount", "loginFailures", "appFailures", "appPerformance", "latency", "loginPerformance")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "testId"))) { #optional property not found
            $TestId = $null
        } else {
            $TestId = $JsonParameters.PSobject.Properties["testId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "testName"))) { #optional property not found
            $TestName = $null
        } else {
            $TestName = $JsonParameters.PSobject.Properties["testName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "activeSessionCount"))) { #optional property not found
            $ActiveSessionCount = $null
        } else {
            $ActiveSessionCount = $JsonParameters.PSobject.Properties["activeSessionCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "activeAccountCount"))) { #optional property not found
            $ActiveAccountCount = $null
        } else {
            $ActiveAccountCount = $JsonParameters.PSobject.Properties["activeAccountCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "activeLauncherCount"))) { #optional property not found
            $ActiveLauncherCount = $null
        } else {
            $ActiveLauncherCount = $JsonParameters.PSobject.Properties["activeLauncherCount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loginFailures"))) { #optional property not found
            $LoginFailures = $null
        } else {
            $LoginFailures = $JsonParameters.PSobject.Properties["loginFailures"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appFailures"))) { #optional property not found
            $AppFailures = $null
        } else {
            $AppFailures = $JsonParameters.PSobject.Properties["appFailures"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appPerformance"))) { #optional property not found
            $AppPerformance = $null
        } else {
            $AppPerformance = $JsonParameters.PSobject.Properties["appPerformance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "latency"))) { #optional property not found
            $Latency = $null
        } else {
            $Latency = $JsonParameters.PSobject.Properties["latency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loginPerformance"))) { #optional property not found
            $LoginPerformance = $null
        } else {
            $LoginPerformance = $JsonParameters.PSobject.Properties["loginPerformance"].value
        }

        $PSO = [PSCustomObject]@{
            "testId" = ${TestId}
            "testName" = ${TestName}
            "activeSessionCount" = ${ActiveSessionCount}
            "activeAccountCount" = ${ActiveAccountCount}
            "activeLauncherCount" = ${ActiveLauncherCount}
            "loginFailures" = ${LoginFailures}
            "appFailures" = ${AppFailures}
            "appPerformance" = ${AppPerformance}
            "latency" = ${Latency}
            "loginPerformance" = ${LoginPerformance}
        }

        return $PSO
    }

}

